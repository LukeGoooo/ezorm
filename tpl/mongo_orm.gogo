{{define "mongo_orm"}}package {{.Package}}
{{$obj := .}}
import (
	//3rd party libs
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"

	//Own libs
	"github.com/ezbuy/ezorm/cache"
	"github.com/ezbuy/ezorm/db"
	. "github.com/ezbuy/ezorm/orm"

	{{range .GetOrmImports}}
	"{{.}}"
	{{end}}
)

func init() {
	{{if .NeedIndex}}
	db.SetOnFinishInit(init{{.Name}}Index)
	{{end}}
	{{if .NeedMapping}}
	db.SetOnFinishInit(init{{.Name}}Mapping)
	{{end}}
	RegisterEzOrmObjByID("{{.Package}}", "{{.Name}}", new{{.Name}}FindByID)
	RegisterEzOrmObjRemove("{{.Package}}", "{{.Name}}", {{.Name}}Mgr.RemoveByID)
	{{if .NeedSearch}}
	RegisterIndexer("{{.Package}}", "{{.Name}}", {{.Name}}Mgr.SearchRebuild)
	{{end}}
}

func InitCache(c cache.Cache) {
	{{.Name}}Cache = c
}

{{if .NeedMapping}}
func init{{.Name}}Mapping() {
	opt := indices.MappingOptions{
		Properties: map[string]interface{}{
			{{range .GetStringFilterFields}}
			"{{.Name}}": map[string]string{"index": "not_analyzed", "type": "string"},
			{{end}}
		},
	}

	indices.CreateIndex("{{.SearchIndex}}")
	indices.PutMapping("{{.SearchIndex}}", "{{.SearchType}}", {{.Name}}{}, opt)
}
{{end}}

{{if .NeedIndex}}
func init{{.Name}}Index() {
	session, collection := {{.Name}}Mgr.GetCol()
	defer session.Close()
	{{range $index := $obj.Indexes}}
reEnsure{{$index.Name}}:
	if err := collection.EnsureIndex(mgo.Index{
		Key: []string{"{{$index.GetFieldList}}"},
		{{- if $index.IsUnique }}
		Unique: true,
		{{- end}}
		Sparse: true,
	}); err != nil {
		println("error ensureIndex {{$obj.Name}} {{$index.Name}}", err.Error())
		err = collection.DropIndex("{{$index.Name}}")
		if err != nil {
			panic(err)
		}
		goto reEnsure{{$index.Name}}

	}
	{{end}}
}
{{end}}

func new{{.Name}}FindByID(id string) (result EzOrmObj, err error) {
	return {{.Name}}Mgr.FindByID(id)
}

{{ .LoadTpl "mongo_mongo" }}

{{ .LoadTpl "mongo_foreign_key" }}

{{ .LoadTpl "mongo_collection" }}

{{ .LoadTpl "mongo_search" }}
{{end}}
